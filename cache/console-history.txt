.exit
console.log(`ERC-20 Allowances After Direct Approval: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608");
const allowance1 = await token1.allowance(signer.address, "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608");
console.log("‚úÖ Directly approved 2000 TK2");
await tx2.wait();
const tx2 = await token2.approve("0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608", ethers.parseUnits("2000", 18));
console.log("‚úÖ Directly approved 1000 TK1");
await tx1.wait();
const tx1 = await token1.approve("0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608", ethers.parseUnits("1000", 18));
console.log("üîç Approval Events for TK2:", approvalEventsTK2);
const approvalEventsTK2 = await token2.queryFilter("Approval", latestBlock - 10, latestBlock);
console.log("üîç Approval Events for TK1:", approvalEventsTK1);
const approvalEventsTK1 = await token1.queryFilter("Approval", latestBlock - 10, latestBlock);
const latestBlock = await ethers.provider.getBlockNumber();
console.log("üîç Recent TK2 Events:", events2);
const events2 = await token2.queryFilter({}, latestBlock - 10, latestBlock);
console.log("üîç Recent TK1 Events:", events);
const events = await token1.queryFilter({}, latestBlock - 10, latestBlock);
const latestBlock = await ethers.provider.getBlockNumber();
console.log("TK2 supports getBlacklistStatus():", !!token2.getBlacklistStatus);
console.log("TK1 supports getBlacklistStatus():", !!token1.getBlacklistStatus);
console.log("TK2 supports isBlacklisted():", !!token2.isBlacklisted);
console.log("TK1 supports isBlacklisted():", !!token1.isBlacklisted);
console.log("TK2 supports paused():", !!token2.paused);
console.log("TK1 supports paused():", !!token1.paused);
console.log("TK2 supports increaseAllowance:", !!token2.increaseAllowance);
console.log("TK1 supports increaseAllowance:", !!token1.increaseAllowance);
console.log("TK2 supports approve:", !!token2.approve);
console.log("TK1 supports approve:", !!token1.approve);
console.log("üîç Approval Event Logs for TK2:", logs2);
const logs2 = await token2.queryFilter(filter2, "latest");
const filter2 = token2.filters.Approval(signer.address, spender);
console.log("üîç Approval Event Logs for TK1:", logs);
const logs = await token1.queryFilter(filter, "latest");
const filter = token1.filters.Approval(signer.address, spender);
console.log(`ERC-20 Allowances After Manual Approval: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("‚úÖ Manually approved 2000 TK2");
await tx2.wait();
const tx2 = await token2.approve(spender, ethers.parseUnits("2000", 18));
console.log("‚úÖ Manually approved 1000 TK1");
await tx1.wait();
const tx1 = await token1.approve(spender, ethers.parseUnits("1000", 18));
console.log("Token2 contract address:", token2.target);
console.log("Token1 contract address:", token1.target);
console.log("Spender address:", spender);
console.log("Signer address:", signer.address);
console.log(`ERC-20 Allowances After Approval: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("‚úÖ Approved 1000 TK1 & 2000 TK2 for spender");
await token2.approve(spender, ethers.parseUnits("2000", 18));
await token1.approve(spender, ethers.parseUnits("1000", 18));
console.log(`ERC-20 Allowances Before Revoke: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("‚úÖ Contracts loaded!");
const spender = "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608";
const token2 = await ethers.getContractAt("ERC20", "0xE7B9Ede68593354aff96690600D008A40519D3CF", signer);
const token1 = await ethers.getContractAt("ERC20", "0x483FA7f61170c19276B3DbB399e735355Ae7676a", signer);
console.log("‚úÖ Signer address:", signer.address);
const [signer] = await ethers.getSigners();
.exit
console.log(`Allowance TK2: ${(await token2.allowance(signer.address, spender)).toString()}`);
console.log(`Allowance TK1: ${(await token1.allowance(signer.address, spender)).toString()}`);
console.log("After revoke:");
console.log(`Allowance TK2: ${(await token2.allowance(signer.address, spender)).toString()}`);
console.log(`Allowance TK1: ${(await token1.allowance(signer.address, spender)).toString()}`);
console.log("Before revoke:");
console.log("Token2 Contract:", token2.target);
console.log("Token1 Contract:", token1.target);
console.log("Spender:", spender);
console.log("Signer:", signer.address);
console.log(`ERC-20 Allowances After Revoke: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("üéâ Batch revocation complete!");
}
    }
        console.log(`üîπ Skipping ${tokenAddress}, already revoked.`);
    } else {
        console.log(`‚úÖ Revoked approval for ${tokenAddress}`);
        await tx.wait();
        const tx = await contract.approve(spender, 0);
        console.log(`üöÄ Revoking approval for ${tokenAddress}...`);
    if (allowance > 0) {
    const allowance = await contract.allowance(signer.address, spender);
    const contract = await ethers.getContractAt("ERC20", tokenAddress, signer);
for (let tokenAddress of tokenContracts) {
console.log("‚è≥ Starting batch revocation...");
const tokenContracts = ["0x483FA7f61170c19276B3DbB399e735355Ae7676a", "0xE7B9Ede68593354aff96690600D008A40519D3CF"];
console.log(`ERC-20 Allowances Before Revoke: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("‚úÖ Approved 1000 TK1 & 2000 TK2 for spender");
await token2.approve(spender, ethers.parseUnits("2000", 18));
await token1.approve(spender, ethers.parseUnits("1000", 18));
console.log("‚è≥ Approving tokens...");
console.log("‚úÖ Loaded contracts & spender address:", spender);
const spender = "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608";
const token2 = await ethers.getContractAt("ERC20", "0xE7B9Ede68593354aff96690600D008A40519D3CF", signer);
const token1 = await ethers.getContractAt("ERC20", "0x483FA7f61170c19276B3DbB399e735355Ae7676a", signer);
console.log("‚úÖ Signer address:", signer.address);
const [signer] = await ethers.getSigners();
.exit
console.log(`ERC-20 Allowances Before: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("‚úÖ Signer address:", signer.address);
const [signer] = await ethers.getSigners();
console.log(`ERC-20 Allowances Before: TK1 = ${allowance1.toString()}, TK2 = ${allowance2.toString()}`);
const allowance2 = await token2.allowance(signer.address, spender);
const allowance1 = await token1.allowance(signer.address, spender);
console.log("‚úÖ Approved 1000 TK1 and 2000 TK2 for spender");
await token2.approve(spender, ethers.parseUnits("2000", 18));
await token1.approve(spender, ethers.parseUnits("1000", 18));
const spender = "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608";
const token2 = await ethers.getContractAt("ERC20", "0xE7B9Ede68593354aff96690600D008A40519D3CF", signer);
const token1 = await ethers.getContractAt("ERC20", "0x483FA7f61170c19276B3DbB399e735355Ae7676a", signer);
const spender = "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608";
const signer = await ethers.getSigner(); // Your wallet
const token2 = await ethers.getContractAt("ERC20", "0xE7B9Ede68593354aff96690600D008A40519D3CF");
const token1 = await ethers.getContractAt("ERC20", "0x483FA7f61170c19276B3DbB399e735355Ae7676a");
.exit
.editor
console.log("‚úÖ MockSpender spent 10 tokens");
await tx.wait();
const tx = await mockSpender.spendERC20(token.target, owner, ethers.parseUnits("10", 18));
const mockSpender = await ethers.getContractAt("MockSpender", "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608");
await multiToken.isApprovedForAll(owner, spender);
await nft.getApproved(tokenId);
await token.allowance(owner, spender);
console.log("‚úÖ Revoked ERC-1155 approval");
await revokeMultiTx.wait();
const revokeMultiTx = await multiToken.setApprovalForAll(spender, false);
console.log(`‚úÖ Revoked approval for NFT ${tokenId}`);
await revokeNftTx.wait();
const revokeNftTx = await nft.approve(ethers.ZeroAddress, tokenId);
console.log("‚úÖ Revoked ERC-20 approval");
await revokeTx.wait();
const revokeTx = await token.approve(spender, 0);
console.log("‚úÖ Approved MockSpender for ERC-1155 transfers");
await tx.wait();
const tx = await multiToken.setApprovalForAll(spender, true);
console.log(`Is MockSpender approved for ERC-1155? ${isApproved}`);
const isApproved = await multiToken.isApprovedForAll(owner, spender);
const multiToken = await ethers.getContractAt("ERC1155", "0x1bd10C54831F9231fDc5bD58139e2c101BE4396A");
console.log(`‚úÖ Approved MockSpender for NFT ${tokenId}`);
await tx.wait();
const tx = await nft.approve(spender, tokenId);
console.log(`Approved address for NFT ${tokenId}:`, approved);
const approved = await nft.getApproved(tokenId);
const tokenId = 1; // Change this if necessary
const nft = await ethers.getContractAt("ERC721", "0x8BB5f4628d7cFf1e2c9342B064f6F1b38376f354");
console.log("‚úÖ Approved 1000 tokens");
await tx.wait();
const tx = await token.approve(spender, ethers.parseUnits("1000", 18)); // Approve 1000 tokens
const allowance = await token.allowance(owner, spender);
console.log(`Allowance: ${allowance.toString()}`);
const allowance = await token.allowance(owner, spender);
console.log("‚úÖ Approved 1000 tokens");
await tx.wait();
const tx = await token.approve(spender, ethers.parseUnits("1000", 18)); // Approve 1000 tokens
console.log(`Allowance: ${allowance.toString()}`);
const allowance = await token.allowance(owner, spender);
const spender = "0x3C8A478ff7839e07fAF3Dac72DCa575F5d4bC608";
const owner = "0xb54a23125D22D2B0AA0A3e8762E631cA19aB1b7c";
const token = await ethers.getContractAt("ERC20", "0x483FA7f61170c19276B3DbB399e735355Ae7676a");
.exit
console.log("üë§ Owner of Token 1:", tokenOwner);
const tokenOwner = await nft.ownerOf(1);
console.log("üîç Approved Spender for Token 1:", approvedForToken1);
const approvedForToken1 = await nft.getApproved(1);
console.log("‚úÖ Operator approved for token 1");
await nft.approve("0x4330F46C529ADa1Ef8BAA8125800be556441F3A5", 1);
console.log("üîç Approved Spender for Token 1:", approvedForToken1);
const approvedForToken1 = await nft.getApproved(1);
console.log("‚úÖ TestNFT Contract Loaded:", nftAddress);
const nft = await ethers.getContractAt("TestNFT", nftAddress);
const nftAddress = "0x6e4f6340e92139f58cf99e32fdfe33b1ca022e92"; 
// Replace with your deployed contract address
const { ethers } = require("hardhat");
.exit
console.log("üîç Approved Spender for Token 1:", approvedForToken);
const approvedForToken = await nft.getApproved(1);
console.log("‚úÖ Operator approved for token 1");
await nft.approve(operator, 1);
console.log("üîç Approved Spender for Token 2:", approvedForToken2);
const approvedForToken2 = await nft.getApproved(2);
.exit
console.log(`‚úÖ Operator ${operator} is now approved for all.`);
await nft.setApprovalForAll(operator, true);
console.log("‚úÖ Batch Revoke Completed!");
await tx.wait();
const tx = await nft.batchRevokeApprovals(tokenIds);
console.log("üö® Revoking Approvals...");
const tokenIds = [1, 2, 3]; // Replace with your token IDs
const signer = await ethers.getSigner(); // Get the Hardhat account signing transactions
console.log(`üîç Approved Spender for Token ${tokenId}:`, approvedForToken);
const approvedForToken = await nft.getApproved(tokenId);
const tokenId = 1; // Test with a valid token ID
console.log("üîç isApprovedForAll:", approvedForAll);
const approvedForAll = await nft.isApprovedForAll(owner, operator);
const operator = "0x4330F46C529ADa1Ef8BAA8125800be556441F3A5"; 
const owner = "0xb54a23125D22D2B0AA0A3e8762E631cA19aB1b7c"; 
console.log("‚úÖ TestNFT Contract Loaded:", nftAddress);
const nft = await ethers.getContractAt("TestNFT", nftAddress);
const nftAddress = "0x6e4f6340e92139f58cf99e32fdfe33b1ca022e92";
// Replace with your actual deployed contract address
const { ethers } = require("hardhat");