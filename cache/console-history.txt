.exit
await checkBalances();
}
    }
        console.log("No ERC1155 tokens minted yet");
    } catch (error) {
        console.log("ERC1155 Token #1 Balance:", erc1155Balance.toString());
        const erc1155Balance = await erc1155.balanceOf(owner.address, 1);
    try {
    console.log("\nChecking ERC1155 Balances:");
    }
        console.log("No NFTs minted yet");
    } catch (error) {
        console.log("NFT Balance:", nftBalance.toString());
        const nftBalance = await nft.balanceOf(owner.address);
    try {
    console.log("\nChecking NFT Ownership:");
    console.log("TK2 Balance:", (await tk2.balanceOf(owner.address)).toString());
    console.log("TK1 Balance:", (await tk1.balanceOf(owner.address)).toString());
    console.log("\nChecking Token Balances:");
async function checkBalances() {
const [owner, addr1, addr2] = await ethers.getSigners();
const erc1155 = await ethers.getContractAt(testERC1155ABI, "0x76a999d5f7efde0a300e710e6f52fb0a4b61ad58");
const nft = await ethers.getContractAt(testNFTABI, "0x084815d1330ecc3ef94193a19ec222c0c73dff2d");
const tk2 = await ethers.getContractAt(testTokenABI, "0x82bbaa3b0982d88741b275ae1752db85cafe3c65");
const tk1 = await ethers.getContractAt(testTokenABI, "0xae246e208ea35b3f23de72b697d47044fc594d5f");
const { abi: testERC1155ABI } = require('./artifacts/contracts/TestERC1155.sol/TestERC1155.json');
const { abi: testNFTABI } = require('./artifacts/contracts/TestNFT.sol/TestNFT.json');
const { abi: testTokenABI } = require('./artifacts/contracts/TestToken.sol/TestToken.json');
.exit
}
    console.log("No ERC1155 tokens minted yet");
} catch (error) {
    console.log("ERC1155 Token #1 Balance:", erc1155Balance);
    const erc1155Balance = await erc1155.balanceOf(owner.address, 1);
try {
console.log("\nChecking ERC1155 Balances:");
}
    console.log("No NFTs minted yet");
} catch (error) {
    console.log("NFT Balance:", nftBalance);
    const nftBalance = await nft.balanceOf(owner.address);
try {
console.log("\nChecking NFT Ownership:");
console.log("TK2 Balance:", await tk2.balanceOf(owner.address));
console.log("TK1 Balance:", await tk1.balanceOf(owner.address));
console.log("\nChecking Token Balances:");
const [owner, addr1, addr2] = await ethers.getSigners();
const erc1155 = await ethers.getContractAt(testERC1155ABI, "0x76a999d5f7efde0a300e710e6f52fb0a4b61ad58");
const nft = await ethers.getContractAt(testNFTABI, "0x084815d1330ecc3ef94193a19ec222c0c73dff2d");
const tk2 = await ethers.getContractAt(testTokenABI, "0x82bbaa3b0982d88741b275ae1752db85cafe3c65");
const tk1 = await ethers.getContractAt(testTokenABI, "0xae246e208ea35b3f23de72b697d47044fc594d5f");
const { abi: testERC1155ABI } = require('./artifacts/contracts/TestERC1155.sol/TestERC1155.json');
const { abi: testNFTABI } = require('./artifacts/contracts/TestNFT.sol/TestNFT.json');
const { abi: testTokenABI } = require('./artifacts/contracts/TestToken.sol/TestToken.json');
.exit
console.log("Final ERC1155 Approved:", finalErc1155Approved);
const finalErc1155Approved = await erc1155.isApprovedForAll(owner.address, MOCK_SPENDER);
console.log("Final NFT Approved:", finalNftApproved);
const finalNftApproved = await nft.isApprovedForAll(owner.address, MOCK_SPENDER);
console.log("Final TK2 Allowance:", finalTk2Allowance);
console.log("Final TK1 Allowance:", finalTk1Allowance);
const finalTk2Allowance = await tk2.allowance(owner.address, MOCK_SPENDER);
const finalTk1Allowance = await tk1.allowance(owner.address, MOCK_SPENDER);
console.log("\nFinal Verification:");
await txERC1155.wait();
const txERC1155 = await erc1155.setApprovalForAll(MOCK_SPENDER, false);
console.log("\nRevoking ERC1155 approval...");
await txNFT.wait();
const txNFT = await nft.setApprovalForAll(MOCK_SPENDER, false);
console.log("\nRevoking NFT approval...");
}
    console.log(`Revoked ERC20 approval for ${tokenAddress}`);
    await tx.wait();
    const tx = await contract.approve(MOCK_SPENDER, 0);
    const contract = new ethers.Contract(tokenAddress, testTokenABI, owner);
for (let tokenAddress of tokenAddresses) {
];
    await tk2.getAddress()
    await tk1.getAddress(),
const tokenAddresses = [
console.log("\nBatch revoking ERC20 tokens...");
console.log("ERC1155 Approved:", erc1155Approved);
const erc1155Approved = await erc1155.isApprovedForAll(owner.address, MOCK_SPENDER);
console.log("NFT Approved:", nftApproved);
const nftApproved = await nft.isApprovedForAll(owner.address, MOCK_SPENDER);
console.log("TK2 Allowance:", tk2Allowance);
console.log("TK1 Allowance:", tk1Allowance);
const tk2Allowance = await tk2.allowance(owner.address, MOCK_SPENDER);
const tk1Allowance = await tk1.allowance(owner.address, MOCK_SPENDER);
console.log("\nVerifying Approvals:");
await erc1155.setApprovalForAll(MOCK_SPENDER, true);
console.log("\nSetting ERC1155 Approval...");
await nft.setApprovalForAll(MOCK_SPENDER, true);
console.log("\nSetting NFT Approval...");
await tk2.approve(MOCK_SPENDER, amount);
await tk1.approve(MOCK_SPENDER, amount);
console.log("\nSetting ERC20 Approvals...");
const amount = ethers.parseUnits("100", 18);
console.log("Mock Spender:", MOCK_SPENDER);
console.log("Owner:", owner.address);
console.log("ERC1155:", await erc1155.getAddress());
console.log("NFT:", await nft.getAddress());
console.log("TK2:", await tk2.getAddress());
console.log("TK1:", await tk1.getAddress());
console.log("\nContract Addresses:");
const MOCK_SPENDER = "0x9DBb24B10502aD166c198Dbeb5AB54d2d13AfcFd";
const [owner] = await ethers.getSigners();
const erc1155 = await ethers.getContractAt(testERC1155ABI, "0x76a999d5f7efde0a300e710e6f52fb0a4b61ad58");
const nft = await ethers.getContractAt(testNFTABI, "0x084815d1330ecc3ef94193a19ec222c0c73dff2d");
const tk2 = await ethers.getContractAt(testTokenABI, "0x82bbaa3b0982d88741b275ae1752db85cafe3c65");
const tk1 = await ethers.getContractAt(testTokenABI, "0xae246e208ea35b3f23de72b697d47044fc594d5f");
const { abi: testERC1155ABI } = require('./artifacts/contracts/TestERC1155.sol/TestERC1155.json');
const { abi: testNFTABI } = require('./artifacts/contracts/TestNFT.sol/TestNFT.json');
const { abi: testTokenABI } = require('./artifacts/contracts/TestToken.sol/TestToken.json');
.exit
console.log("TK2 final allowance:", finalTk2Allowance);
console.log("TK1 final allowance:", finalTk1Allowance);
console.log("\nFinal Verification:");
const finalTk2Allowance = await tk2.allowance(owner.address, MOCK_SPENDER);
const finalTk1Allowance = await tk1.allowance(owner.address, MOCK_SPENDER);
}
    console.log(`Revoked approval for ${tokenAddress}`);
    await tx.wait();
    const tx = await contract.approve(MOCK_SPENDER, 0);
    const contract = new ethers.Contract(tokenAddress, testTokenABI, owner);
for (let tokenAddress of tokenAddresses) {
console.log("\nStarting batch revocation...");
];
    await tk2.getAddress()
    await tk1.getAddress(),
const tokenAddresses = [
}
    await tk2.approve(MOCK_SPENDER, amount);
    console.log("Setting TK2 allowance...");
if (tk2Allowance === 0n) {
}
    await tk1.approve(MOCK_SPENDER, amount);
    console.log("Setting TK1 allowance...");
if (tk1Allowance === 0n) {
console.log("TK2:", tk2Allowance);
console.log("TK1:", tk1Allowance);
console.log("Current Allowances:");
const tk2Allowance = await tk2.allowance(owner.address, MOCK_SPENDER);
const tk1Allowance = await tk1.allowance(owner.address, MOCK_SPENDER);
const [owner] = await ethers.getSigners();
const amount = ethers.parseUnits("100", 18);
const MOCK_SPENDER = "0x9DBb24B10502aD166c198Dbeb5AB54d2d13AfcFd";
console.log("TK2 address:", await tk2.getAddress());
console.log("TK1 address:", await tk1.getAddress());
);
  "0x82bbaa3b0982d88741b275ae1752db85cafe3c65"
  testTokenABI,
const tk2 = await ethers.getContractAt(
);
  "0xae246e208ea35b3f23de72b697d47044fc594d5f"
  testTokenABI,
const tk1 = await ethers.getContractAt(
const { abi: testTokenABI } = require('./artifacts/contracts/TestToken.sol/TestToken.json');
.exit
await tk2.approve(MOCK_SPENDER, amount);
await tk1.approve(MOCK_SPENDER, amount);
const amount = ethers.parseUnits("100", 18);
const MOCK_SPENDER = "0x9DBb24B10502aD166c198Dbeb5AB54d2d13AfcFd";
.exit
console.log("TK2 final allowance:", finalTk2);
console.log("TK1 final allowance:", finalTk1);
console.log("\nFinal Verification:");
const finalTk2 = await tk2.allowance(owner.address, spenderAddress);
const finalTk1 = await tk1.allowance(owner.address, spenderAddress);
console.log("TK2 Allowance after revoke:", afterRevokeTk2);
const afterRevokeTk2 = await tk2.allowance(owner.address, spenderAddress);
await tk2.approve(spenderAddress, 0);
console.log("\nRevoking TK2 approval...");
console.log("TK1 Allowance after revoke:", afterRevokeTk1);
const afterRevokeTk1 = await tk1.allowance(owner.address, spenderAddress);
await tk1.approve(spenderAddress, 0);
console.log("\nRevoking TK1 approval...");
console.log("Current TK2 Allowance:", currentTk2Allowance);
console.log("Current TK1 Allowance:", currentTk1Allowance);
const currentTk2Allowance = await tk2.allowance(owner.address, spenderAddress);
const currentTk1Allowance = await tk1.allowance(owner.address, spenderAddress);
console.log("TK2 Allowance for MockSpender:", tk2Allowance);
const tk2Allowance = await tk2.allowance(owner.address, spenderAddress);
await tk2.approve(spenderAddress, amount);
console.log("TK1 Allowance for MockSpender:", tk1Allowance);
const tk1Allowance = await tk1.allowance(owner.address, spenderAddress);
await tk1.approve(spenderAddress, amount);
const amount = ethers.parseUnits("100", 18);
const spenderAddress = "0x9DBb24B10502aD166c198Dbeb5AB54d2d13AfcFd"; // MockSpender
console.log("Owner TK1 balance:", ownerTk1Balance);
const ownerTk1Balance = await tk1.balanceOf(owner.address);
console.log("Testing with owner:", await owner.getAddress());
const [owner, addr1] = await ethers.getSigners();
);
  "0x82bbaa3b0982d88741b275ae1752db85cafe3c65"
  testTokenABI,
const tk2 = await ethers.getContractAt(
);
  "0xae246e208ea35b3f23de72b697d47044fc594d5f"
  testTokenABI,
const tk1 = await ethers.getContractAt(
const { abi: testTokenABI } = require('./artifacts/contracts/TestToken.sol/TestToken.json');
.exit
console.log("TK1 Allowance after revoke:", newTk1Allowance);
const newTk1Allowance = await tk1.allowance(owner.address, spenderAddress);
await tk1.approve(spenderAddress, 0);
console.log("TK2 is approved:", isApproved2);
console.log("TK1 is approved:", isApproved1);
const isApproved2 = (await tk2.allowance(owner.address, spenderAddress)) > 0n;
const isApproved1 = (await tk1.allowance(owner.address, spenderAddress)) > 0n;
console.log("TK2 Allowance:", tk2Allowance);
const tk2Allowance = await tk2.allowance(owner.address, spenderAddress);
await tk2.approve(spenderAddress, amount);
console.log("TK1 Allowance:", tk1Allowance);
const tk1Allowance = await tk1.allowance(owner.address, spenderAddress);
await tk1.approve(spenderAddress, amount);
const amount = 100n * (10n ** 18n);
const spenderAddress = addr1.address;
console.log("TK2 deployed to:", tk2Address);
console.log("TK1 deployed to:", tk1Address);
const tk2Address = await tk2.getAddress();
const tk1Address = await tk1.getAddress();
await tk2.waitForDeployment();
await tk1.waitForDeployment();
const tk2 = await Token.deploy("Test Token 2", "TK2", 18);
const tk1 = await Token.deploy("Test Token 1", "TK1", 18);
const Token = await ethers.getContractFactory("TestToken");
.exit
await tk2.deployed();
await tk1.deployed();
const tk2 = await Token.deploy("Test Token 2", "TK2");
const tk1 = await Token.deploy("Test Token 1", "TK1");
const Token = await ethers.getContractFactory("TestToken");
await tk2.deployed();
await tk1.deployed();
const tk2 = await Token.deploy("Test Token 2", "TK2");
const tk1 = await Token.deploy("Test Token 1", "TK1");
const Token = await ethers.getContractFactory("TestToken");
console.log("Owner address:", await owner.getAddress());
const [owner, addr1, addr2] = await ethers.getSigners();
.exit
console.log("🔍 ERC-1155 Approval Status:", isApproved);
const isApproved = await erc1155.isApprovedForAll(ownerAddress, spenderAddress);
console.log("Owner Address:", ownerAddress);
console.log("Spender Address:", spenderAddress);
console.log("Contract Address:", contractAddress);
const spenderAddress = "0x43c5df0c482c88cef8005389f64c362ee720a5bc"; // The spender
const ownerAddress = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; // Your wallet address
const contractAddress = "0x1f585372f116e1055af2bed81a808ddf9638dccd"; // Your ERC-1155 contract
console.log("Owner Address:", ownerAddress);
console.log("Spender Address:", spenderAddress);
console.log("Contract Address:", contractAddress);
.exit
console.log("🔍 ERC-1155 Approval Status After Setting:", isApprovedAfter);
const isApprovedAfter = await erc1155.isApprovedForAll(owner, spender);
console.log("✅ Approval set for spender:", spender);
await tx.wait(); // Wait for the transaction to complete
const tx = await erc1155.setApprovalForAll(spender, true);
console.log("🔍 ERC-1155 Approval Status:", isApproved);
const isApproved = await erc1155.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc";
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; 
const erc1155 = await ethers.getContractAt("TestERC1155", "0x1f585372f116e1055af2bed81a808ddf9638dccd", signer);
const signer = provider.getSigner(); // ✅ Attach a signer
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");
.exit
console.log("🔍 ERC-1155 Approval Status:", isApproved);
const isApproved = await erc1155.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc";
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; 
console.log("🔍 ERC-1155 Approval Status:", isApproved);
const isApproved = await erc1155.isApprovedForAll(owner, spender);
const erc1155 = await ethers.getContractAt("TestERC1155", "0x1f585372f116e1055af2bed81a808ddf9638dccd", signer);
const signer = provider.getSigner(); // ✅ Attach a signer
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");
 .exit
const erc1155 = await ethers.getContractAt("TestERC1155", "0x1f585372f116e1055af2bed81a808ddf9638dccd", signer);
const signer = provider.getSigner(); // ✅ Attach a signer
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");
console.log("🔍 ERC-1155 Approval Status:", isApproved);
const isApproved = await erc1155.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc";
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";
const erc1155 = await ethers.getContractAt("TestERC1155", "0x1f585372f116e1055af2bed81a808ddf9638dccd", provider);
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");
npx hardhat console --network localhost
.exit
const erc1155 = new ethers.Contract("0x1f585372f116e1055af2bed81a808ddf9638dccd", TestERC1155.abi, provider);
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");
console.log("🔍 ERC-1155 Approval Status:", isApproved);
const isApproved = await erc1155.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc"; 
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; 
console.log("🔍 ERC1155 ABI Methods:", erc1155.interface.fragments.map(f => f.name));
const erc1155 = await ethers.getContractAt("TestERC1155", "YOUR_ERC1155_CONTRACT_ADDRESS");
console.log("🔍 ERC1155 ABI Methods:", contract.interface.fragments.map(f => f.name));
.exit
console.log("Fresh Approval After Revoking:", freshApproval);
freshApproval = await nft.isApprovedForAll(owner, spender);
await nft.setApprovalForAll(spender, false);
console.log("Fresh Approval Check:", freshApproval);
let freshApproval = await nft.isApprovedForAll(owner, spender);
let spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc";
let owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; 
let nft = await ethers.getContractAt("TestNFT", "0x103416cfCD0D0a32b904Ab4fb69dF6E5B5aaDf2b");
.exit
console.log("Fresh Approval Check:", freshApproval);
let freshApproval = await nft.isApprovedForAll(owner, spender);
let spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc"; // The operator/spender
let owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; // Your wallet address
let nft = await ethers.getContractAt("TestNFT", "0x103416cfCD0D0a32b904Ab4fb69dF6E5B5aaDf2b");
console.log("Fresh Approval Check:", freshApproval);
let freshApproval = await nft.isApprovedForAll(owner, spender);
console.log("Fresh Approval Check:", freshApproval);
const freshApproval = await nft.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc"; // The operator/spender
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; // Your wallet address
const nft = await ethers.getContractAt("TestNFT", "0x103416cfCD0D0a32b904Ab4fb69dF6E5B5aaDf2b");
console.log("Fresh Approval Check:", freshApproval);
const freshApproval = await nft.isApprovedForAll(owner, spender);
.exit
console.log("Approval Events:", approvalEvents);
const approvalEvents = await nft.queryFilter("ApprovalForAll");
console.log("Transaction Receipt:", transactionReceipt);
const transactionReceipt = await ethers.provider.getTransactionReceipt("0xdac6db42ea03f8d54f6929ec0252f9ae78760c2a9feaadb0a8a9021d54343e77");
console.log("Latest Block:", latestBlock);
const latestBlock = await ethers.provider.getBlockNumber();
console.log("Approval Status After Setting:", isApproved);
const isApproved = await nft.isApprovedForAll(owner, spender);
await nft.setApprovalForAll(spender, true);
console.log("Approval Status After Setting:", isApproved);
const isApproved = await nft.isApprovedForAll(owner, spender);
await nft.setApprovalForAll(spender, true);
console.log("Approval Status:", isApproved);
const isApproved = await nft.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc";
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";
console.log(nft.interface.fragments.map(f => f.name));
const nft = await ethers.getContractAt("TestNFT", "0x103416cfCD0D0a32b904Ab4fb69dF6E5B5aaDf2b");
console.log("🔍 Approval Status:", isApproved);
const isApproved = await nft.isApprovedForAll(owner, spender);
const spender = "0x43c5df0c482c88cef8005389f64c362ee720a5bc"; // Spender to check
const owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"; // Your account
const nft = await ethers.getContractAt("TestNFT", "0x103416cfCD0D0a32b904Ab4fb69dF6E5B5aaDf2b");
console.log(code !== "0x" ? "✅ Contract is deployed" : "❌ No contract at this address");
const code = await ethers.provider.getCode(contractAddress);
const contractAddress = "0x103416cfCD0D0a32b904Ab4fb69dF6E5B5aaDf2b"; // Replace with your NFT contract
// Check if a contract is deployed at an address (Example: TestNFT)
console.log("Current Block:", blockNumber);
const blockNumber = await ethers.provider.getBlockNumber();
// Check the current block number
await ethers.provider.getNetwork()
console.log(await nftContract.isApprovedForAll("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266", "0x43c5df0c482c88cef8005389f64c362ee720a5bc"));
const nftContract = await ethers.getContractAt("TestNFT", "0xYourNewNFTContractAddress");